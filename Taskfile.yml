version: "3"

env:
  CGO_ENABLED: 0

tasks:
  build:
    desc: Build the bab binary
    cmds:
      - go build -o bab .
    generates:
      - bab

  install:
    desc: Install bab to $GOPATH/bin
    cmds:
      - go install .

  run:
    desc: Run bab from source
    cmds:
      - go run . {{.CLI_ARGS}}

  test:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.txt -covermode=atomic ./...

  test:race:
    desc: Run tests with race detector (matches CI)
    cmds:
      - go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  test:quick:
    desc: Run tests without coverage
    cmds:
      - go test -v ./...

  coverage:
    desc: Generate and open HTML coverage report
    cmds:
      - go test -coverprofile=coverage.txt ./...
      - go tool cover -html=coverage.txt -o coverage.html
      - |
        if command -v open >/dev/null 2>&1; then
          open coverage.html
        elif command -v xdg-open >/dev/null 2>&1; then
          xdg-open coverage.html
        else
          echo "Coverage report saved to coverage.html"
        fi

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  lint:
    desc: Run golangci-lint (matches CI)
    cmds:
      - golangci-lint run --config=".golangci.yaml" --timeout=5m

  lint:fix:
    desc: Run golangci-lint and auto-fix issues
    cmds:
      - golangci-lint run --config=".golangci.yaml" --timeout=5m --fix

  format:
    desc: Format code with gofmt and goimports
    cmds:
      - gofmt -w .
      - |
        if command -v goimports >/dev/null 2>&1; then
          goimports -w .
        else
          echo "goimports not installed, skipping (install: go install golang.org/x/tools/cmd/goimports@latest)"
        fi

  format:check:
    desc: Check if code is formatted correctly
    cmds:
      - |
        UNFORMATTED=$(gofmt -l .)
        if [ -n "$UNFORMATTED" ]; then
          echo "Code is not formatted. Run: task format"
          echo "$UNFORMATTED"
          exit 1
        fi

  check:
    desc: Run all checks that CI runs (vet, lint, test with race)
    cmds:
      - task: vet
      - task: lint
      - task: test:race

  verify:
    desc: Run all verification steps (same as check)
    cmds:
      - task: check

  fix:
    desc: Auto-fix everything (format + lint:fix)
    cmds:
      - task: format
      - task: lint:fix

  deps:
    desc: Download and tidy dependencies
    cmds:
      - go mod download
      - go mod tidy

  clean:
    desc: Clean build artifacts and generated files
    cmds:
      - rm -f bab bab.exe
      - rm -f coverage.txt coverage.html
      - rm -rf dist/

  dev:
    desc: Build and run bab in one command
    cmds:
      - task: build
      - ./bab {{.CLI_ARGS}}

  help:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  default:
    desc: Run the default task (help)
    cmds:
      - task: help
    silent: true
